{"version":3,"sources":["Todo.js","Todos.js","Header.js","AddTodo.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Todo","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","toggleComplete","styleBut","onClick","deleteMe","Component","float","borderRadius","border","outline","color","Todos","todos","className","map","key","Header","to","AddTodo","useState","setTitle","onSubmit","e","preventDefault","addTodo","placeholder","name","value","target","About","App","Update","state","setState","axios","delete","then","res","filter","post","console","log","data","get","response","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3dd09d04.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n class Todo extends Component {\r\n       getStyle = () => {\r\n           return {\r\n               background:\"#f4f4f4\",\r\n               padding: \" 10px\",\r\n               borderBottom: \"1px solid gray\",\r\n               textDecoration : this.props.todo.completed ? \"line-through\" : \"none\"\r\n           }\r\n      }\r\n    render() {\r\n        const {id , title} =this.props.todo\r\n        return (\r\n            <div style ={this.getStyle()}>\r\n               <p> <input type=\"checkbox\" onChange ={() => this.props.toggleComplete(id)}/> {\" \"}{title} <button style ={styleBut} onClick ={() => this.props.deleteMe(id)}>X</button></p> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst styleBut = {\r\n    float:\"right\",\r\n    borderRadius:\"50%\",\r\n    padding:\"5px 9px\",\r\n    background:\"red\",\r\n    border:\"none\",\r\n    outline:\"none\",\r\n    color:\"white\"\r\n}\r\n\r\nexport default Todo\r\n","import React, { Component } from 'react'\r\nimport Todo from './Todo'\r\n\r\n class Todos extends Component {\r\n    render() {\r\n        const {todos} = this.props\r\n        return (\r\n            <div className =\"todos\">\r\n                {\r\n              todos.map(todo => <Todo key ={todo.id} todo ={todo} toggleComplete = {this.props.toggleComplete} deleteMe ={this.props.deleteMe}/>)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todos\r\n","import React from 'react'\r\nimport './Header.css';\r\nimport {Link} from 'react-router-dom'\r\nfunction Header() {\r\n    return (\r\n       <header>\r\n           <h1>TodoList App</h1>\r\n           <Link to =\"/\">Home</Link> | <Link to =\"/about\">About</Link>\r\n       </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React , {useState} from 'react'\r\nimport \"./AddTodo.css\"\r\nfunction AddTodo(props) {\r\n    const [title , setTitle] = useState(\"\")\r\n   const submitMe = (e) => {\r\n       e.preventDefault()\r\n       props.addTodo(title)\r\n       setTitle(\"\")\r\n       \r\n   }\r\n    return (\r\n       <form onSubmit ={submitMe}>\r\n           <input type=\"text\" placeholder=\"Add todo ...\" name = \"title\" value ={title} onChange ={(e) => setTitle(e.target.value)}/>\r\n           <input type=\"submit\" value =\"Submit\" />\r\n       </form>\r\n    )\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h1>About</h1>\r\n            <p>This Is The TodoList App >>>>>>  </p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react'\nimport Todos from './Todos'\nimport Header from './Header'\nimport AddTodo from './AddTodo'\nimport {BrowserRouter as Router , Route} from 'react-router-dom';\nimport About from './About';\nimport axios from \"axios\"\n// import { v4 as uuid} from \"uuid\" ;\n class App extends Component {\n   constructor(props) {\n     super(props)\n   \n     this.state = {\n         todos: [\n          //  {id:1,\n          //   title :\"Taking Out The Trash\",\n          //   completed:false\n          // },\n          // {id:2,\n          //   title :\"Dinner With Wife\",\n          //   completed:false\n          // },\n          // {id:3,\n          //   title :\"Meeting With Boss\",\n          //   completed:false\n          // }\n         ]\n     }\n   }\n   componentDidMount(){\n     axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=7\")\n     .then( response => {\n       console.log(response.data)\n       this.setState({todos:response.data})\n     })\n   }\n   toggleComplete = (id) => {\n     const Update = this.state.todos.map( todo => {\n         if(todo.id === id ){\n           todo.completed = !todo.completed\n         }\n      return todo\n     })\n     this.setState({todos:Update})\n   }\n   deleteMe = (id) => {\n     axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n     .then(res => this.setState({todos : this.state.todos.filter(todo => todo.id !== id)}))\n    \n   }\n   addTodo = (title) => {\n     axios.post(\"https://jsonplaceholder.typicode.com/todos\" , {\n       title,\n       completed:false\n     })\n     .then(res =>  { console.log(res.data) \n      this.setState({todos:[ ...this.state.todos , res.data ]}) })\n\n      // console.log(this.state.todos)\n      \n   }\n  render() {\n    return (\n      <Router>\n        {/* <Switch>  */}\n      <div>\n        <Header />\n        \n         <Route  exact path = \"/\">\n        <AddTodo addTodo ={this.addTodo}/>\n           <Todos todos ={this.state.todos} toggleComplete ={this.toggleComplete} deleteMe ={this.deleteMe}/>\n           </Route>\n           <Route path =\"/about\">\n                <About />\n           </Route>   \n      </div>\n      {/* </Switch> */}\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\nif(module.hot){\n  module.hot.accept()\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}